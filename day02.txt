SELET 데이터를 조회한다. 데이터가 변경되지 않는다.
	SELECT	읽기
	*	모든 열
	FROM ~	~테이블로 부터


기본 SELET 예시
	SELECT *
	FROM hr.employees;
	
특정 열만 조회
	SELECT employee_id, first_name, last_name
	FROM hr.employees;
	
ORDER BY ~ [ASC / DESC] ~열을 기준으로[오름차순/내림차순]
	SELECT employee_id, first_name, last_name
	FROM hr.employees
	ORDER BY employee_id DESC;

DISTINCT (열이름)~ 해당 열에서 중복되는 행을 제거함
	SELECT DISTINCT job_id
	FROM hr.employees;

~ AS ~ 특정 열에 별명을 붙여서 조회한다.(열이름이 바뀌어서 조회됨 원본에는 영향 없음)
	SELECT employee_id AS 사원번호, first_name AS 이름, last_name AS 성
	FROM hr.employees;

|| 연결 연산자 (특정 열들을 합쳐서 조회)
	SELECT employee_id AS 사원번호, first_name || ' ' || last_name
	FROM hr.employees;
	first_name과 las_tname을 띄어쓰기까지 합쳐서 같은 행으로 조회한다.
	
	SELECT employee_id, first_name || ' ' || last_name, email || '@' || 'company.com'
	FROM hr.employees;
	1번열 employee_id 조회
	2번열 first_name과 las_tname을 띄어쓰기까지 합쳐서 같은 행으로 조회한다.
	3번열 email을 @와 company.com를 붙여서 출력한다.

산술연산자
	SELECT employee_id AS 사원번호, 
   		salary AS 급여, 
    		salary+500 AS 추가급여, 
    		salary-100 AS 인하급여, 
    		(salary*1.1)/2 AS 조정급여
	FROM hr.employees;
	마찬가지로 원본에는 영향이 없다.

---------------------------------------------------------------------
위에서는 열에 조건을 붙였다.

WHERE
	WHERE는 행에 조건을 붙인다.(‘어디에서 어떻게’ 가져올지 정함)
	WHERE 절은 FROM 절 다음에 위치

	SELECT 열 이름 --------➋ 출력하려는 열
	FROM 테이블 이름 ------➊ 참조하려는 테이블
	WHERE 원하는 조건; ----➌ 조건식

	➊ 참조하려는 테이블로부터(FROM)

	➋ 해당 조건식으로(WHERE)

	➌ 열을 선택(SELECT)하여 조회합니다.

비교 연산자	- 조건을 비교 - [=, <, > 등]

SQL 연산자 - 조건 비교를 확장 - BETWEEN, IN 등

논리 연산자 - 조건 논리를 연결 - AND, OR 등

*비교 연산자 사용법
	SELECT *
	FROM hr.employees
	WHERE employee_id = 100;
	사원번호가 100인 열을 조회

	SELECT *
	FROM   hr.employees
	WHERE  first_name = 'David';
	성이 David인 열을 조회(일치하는 문자열을 찾으므로 대소문자를 구분한다.)

	WHERE  employee_id >= 105;
	사번이 105이상인 열을 조회

*SQL 연산자 사용법

BETWWEN ~AND~ >=와 <= 연산자를 함께 사용한 것과 같음
	WHERE  salary BETWEEN 10000 AND 20000;
	급여가 10000이상 20000이하인 열을 조회

IN 연산자 (=과 같으나 여러개를 지정할 수 있다. -> 특정 항목과 일치하면 조회)
	WHERE  salary IN (10000, 17000, 24000);
	급여가 10000, 17000, 24000 이면 조회
	
LIKE연산자
	LIKE 연산자는 조회 조건 값이 명확하지 않을 때 사용합니다. LIKE 연산자는 ‘~와 같다’라는 의미입니다.
	%는 모든문자
	_는 한글자

	WHERE  job_id LIKE 'AD%';
	job_id에서 AD이후에 몇개의 글자가 오든 조회(AD로시작하는...)

	WHERE  job_id LIKE 'AD___';
	job_id에서 AD이후에 3개의 글자가 있는 데이터 조회

	%AD / %AD% / %@% 등등으로 사용가능하다.


IS NULL 연산자
	'값이 없는' 이라는 조건 즉, 빈셀을 조회함
	WHERE  manager_id IS NULL;

*논리 연산자
AND 연산자  - 교집합 두 조건중 둘 다 일치하는 열을 조회

	SELECT *
	FROM   hr.employees
	WHERE  salary > 4000
	AND job_id = 'IT_PROG';
	두 조건이 모두 일치하는 열을 조회

OR 연산자 - 합집합 두 조건중 하나라도 일치하는 열을 조회
	SELECT *
	FROM   hr.employees
	WHERE  salary > 4000
	AND job_id = 'IT_PROG'
	OR job_id = 'FI_ACCOUNT';
	
	salary > 4000조건에 일치하고 job_id가 IT_PROG거나 FI_ACCOUNT인 행을 조회

NOT 연산자 - 비교연산자는 '!=', '<>', 'NOT'으로 사용한다.
	- SQL연산자는 'NOT'을 사용한다.
	
	WHERE employee_id <> 105;
	WHERE manager_id IS NOT NULL;




======================================================

**함수
- 단일 행 함수
	단일 행 함수는 한 번에 하나의 데이터를 처리하는 함수입니다. a1 값을 처리한 후 a2 값을 처리합니다. 
	(하나의 행에서 하나의 결과)
- 그룹 함수
	반면 그룹 함수는 여러 건의 데이터를 동시에 처리하여 해당 그룹에 해당하는 결과를 반환합니다. 
	즉, d1, d2, d3, d4를 동시에 입력받아 함수를 거쳐 결괏값을 출력합니다. 
	그룹 함수는 주로 나중에 배울 GROUP BY 절과 함께 쓰이며 요약된 정보를 출력해야 할 때 유용합니다.
	(여러개의 행에서 하나의 결과)


*LOWER(arg)/UPPER(arg)/INITCAP(arg)
arg를 소문자로, 대문자로 , 앞글자만 대문자로

	SELECT last_name,
       		LOWER(last_name) LOWER적용,
       		UPPER(last_name) UPPER적용,
       		email,
       		INITCAP(email) INITCAP적용
	FROM   hr.employees;

*SUBSTR(col, start, end)
	col(열)데이터를 조회하는데 start인덱스부터 end인덱스까지 가져옴

	SELECT job_id, SUBSTR(job_id, 1, 2) 적용결과
	FROM hr.employees;

	조회하는 값을 1부터 2까지만 가져옴 

******SQL에서는 index가 0이 아니라 1부터 시작함*******

*REPLACE(col, '변경하려는 문자', '변경된 문자') 
	col(열)데이터를 조회하는데 a를 b로 바꿔서 가져옴

	SELECT job_id, REPLACE(job_id, 'ACCOUNT', 'ACCNT') 적용결과

	FROM   hr.employees;


*LPAD(열이름, 만들어질 자리수, '채워질문자') / RPAD()
	둘은 동일하고 LPAD는 오른쪽으로 정렬하고
	RPAD는 왼쪽으로 정렬한다.

	SELECT first_name, LPAD(first_name, 12, '*') LPAD적용결과
	FROM   hr.employees;

	모든 결과를 오른쪽 정렬로 12자리로 맞추는데 빈공간은 *로 채움

	SELECT first_name, LPAD(first_name, 12, ' ') LPAD적용결과
	FROM   hr.employees;
	주로 이런식으로 공백을 넣어서 정렬하는데 사용함

*LTRIM('문자열'/열이름, '삭제할 문자') / RTRIM()
	LTRIM은 왼쪽부터 RTRIM은 오른쪽부터 '삭제할 문자'를 찾아서 삭제함
	지정한 문자 외의 값을 만나면 진행을 중단함

	SELECT job_id,
	       	LTRIM(job_id, ' ') LTRIM적용결과,
	       	RTRIM(job_id, ' ') RTRIM적용결과
	FROM   employees;
	주로 공백을 넣어서 공백을 없애는데 사용함

*TRIM('문자열'/열이름)
	앞,뒤 공백을 제거한다.

	SELECT 'start' || TRIM('    - space -    ') || 'end' 제거된_공백
	FROM dual;

	여기서 사용한 dual테이블은 더미테이블이다. 테스트용이라고 생각하면되고 오라클에만 있다.

**숫자타입 함수
	ROUND(13.44, 0), MOD(4,3), POWER() 등등...
	
* ROUND(숫자/열이름, 반올림 할 자리값) - 반올림
	SELECT salary,
    		salary/30 일급,
    		ROUND(salary/30, 0) 적용결과0,
    		ROUND(salary/30, 1) 적용결과1,
    		ROUND(salary/30, -1) 적용결과MINUS1
	FROM hr.employees;

	ROUND() 반올림 사용시 
	0은 소수점이 없고 		-> 33
	1은 소수점 아래 1자리수까지 	-> 33.3
	-1은 소수점 위 1자리부터	-> 30

* TRUNC(숫자/열이름, 절삭할 자리 값) - 버림
	ROUND와 동일한데 버림을 수행하는 함수임



