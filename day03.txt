변환 함수

데이터 타입 변환은 오라클에 의해 자동으로(암묵적으로) 혹은 수동으로 (명시적으로) 실행할 수 있다.

자동 타입 변환

varchar로 되어 있는 데이터값 100은 number타입으로 자동변환되어 산술 계산될 수 있다.
반대로 number 타입 100은 varchar타입으로 자동변환되어 저장될 수 있다.

작은 따옴표로 묶였기 때문에 문자 데이터 타입, 오라클에 의해 자동으로 형변환이 이루어져 계산되었다.
	SELECT 1 + '2'
	FROM DUAL;


하지만... 자동 형변환을 이용할 수 있더라도 SQL의 안전성을 위해 수동 데이터 타입 변환을 수행할것을 권장한다.

사용자가 타입을 변환할 수 있도록 변환함수를 제공한다.

TO_CHAR		숫자 문자 날짜 값을 VARCHAR2 타입으로 변환한다.
TO_NUMBER	문자를 숫자로 변환한다.
TO_DATE		날짜처럼 보이는 문자열을 진짜 날짜 타입으로 변환한다.

	SELECT TO_CHAR(SYSDATE, 'YY')
	FROM DUAL;

	SELECT TO_CHAR(SYSDATE, 'YYYY')
	FROM DUAL;

현재 시스템의 진짜 날짜에서 월만 추출하여 표기
	SELECT TO_CHAR(SYSDATE, 'MON') (MON은 알파벳으로/MM은 숫자로)
	FROM DUAL;
년월일 모두
	SELECT TO_CHAR(SYSDATE, 'YYYYMMDD')
	FROM DUAL;

특정 년월일을 나타내기(날자로 바꾼걸 다시 CHAR로 변환)
	SELECT TO_CHAR(TO_DATE('20000101','YYYY-MM-DD'), 'YYYYMMDD')
	FROM DUAL;


날짜 시간 표시
	SELECT TO_CHAR(SYSDATE, 'YYYY/MM/DD HH:MI:SS PM')
	FROM DUAL;

### 숫자로 형변환

123이라는 문자를 진짜 숫자로 변환
	SELECT TO_NUMBER('123')
	FROM DUAL;

함수
NVL(열이름, 대체값) : null값을 대체하는 값 지정
not null : null 값을 가지지 못하도록 지정

null의 특징
값이 항당되지 않아 사용이 불가능한 값

	SELECT *
	FROM hr.employees
	ORDER BY commission_pct;

	null값들이 순서대로 아래에 배치된다



	SELECT salary * commission_pct
	FROM hr.employees
	ORDER BY commission_pct;
	
	null을 포함한 계산 결과는 null이 된다.


	SELECT salary * NVL(commission_pct, 0.001)
	FROM hr.employees
	ORDER BY commission_pct;

	commission_pct가 null인 경우에는 0.001로 대체한다.

null은 산술이나 배율 등을 계산할때 논리적으로 오류를 일으킬 경우가 발생한다.
이런경우 NVL함수를 사용하여 null값을 의도에 맞게 처리할 수 있다.

DECODE 함수 : if와 유사 조건 처리
(열, 조건, true 경우,false 경우)


	SELECT first_name, last_name, salary 원래급여,
        		DECODE(department_id, 60, salary*1.1, salary) 조정된급여,
        		DECODE(department_id, 60, '10%보너스', '노보너스') 보너스지급여부
	FROM hr.employees;

CASE 복잡한 조건을 여러개 처리
DECODE 함수는 데이터 값이 정확히 맞거나 틀린 경우 처리하기가 쉽고
CASE 함수는 조건의 범위가 다양하고 복잡한 경우 쉽게 처리할 수 있다.

	salary 값의 조건에 따라 3가지로 구분한 값을 새로운 열 급여등급을 만들어 표시한다.

	SELECT first_name, last_name, salary,
    		CASE
        			WHEN salary >= 9000 THEN '상위급여'
        			WHEN salary BETWEEN 600 AND 8999 THEN '중위급여'
        			ELSE '하위급여'
    		END AS 급여등급
	FROM hr.employees;

	데이터 값의 범위를 정확하게 모르는 상태에서 특정 조건에 맞춰 출력한다면 CASE문이 유용하다.
	실무에서도 CASE문은 매우 다양하게 활용할 수 있다. 예를 들면 점수에 대한 등급, 나이에 대한
	나이대 설정, 지역 구분등 얼마든지 응용할 수 있는 범위가 많다.

RANK, DENSE_RANK, ROW_NUMBER 순위 매기기

	RANK - 공통 순위만큼 건너뛰어 다음 순위를 출력한다.	1,2,2,4
	DENSE_RANK - 공통순위를 출력하고 건너뛰지 않고 다음 순위 출력	1,2,2,3
	ROW_NUMBER - 공통 순위 없이 출력		1,2,3,4

	SELECT employee_id, salary,
    		RANK() OVER (ORDER BY salary DESC) RANK_급여,
    		DENSE_RANK() OVER (ORDER BY salary DESC) DENSE_RANK_급여,
    		ROW_NUMBER() OVER (ORDER BY salary DESC) ROW_NUMBER_급여
	FROM hr.employees;

그룹 요약 함수
단일행함수와는 달리 여러행에 대해 함수가 적용되어 하나의 결과를 나타내는 함수이다.
집계함수라고 부르기도 한다.

대부분의 그룹함수 null이 있으면 그 값은 제외하고 연산한다. 하지만 count함수는 count(*)의 경우 null값도
행으로 셀수 있다.

GROUP BY
HAVING

salary 열 전체의 갯수
SELECT count(*)
FROM hr.employees;	->결과 107(NULL값 포함)

SELECT COUNT(COMMISSION_PCT)
FROM hr.employees;	->결과 35(NULL값 제외)



SUM()/AVG()
	SELECT SUM(salary) 합계, AVG(salary) 평균, SUM(salary)/COUNT(salary) 계산한평균
	FROM hr.employees;

MAX(), MIN()
	SELECT MAX(salary) 최대값, MIN(salary) 최소값, MAX(first_name) 최대문자값, MIN(first_name) 최소문자값
	FROM hr.employees;

GROUP BY 그룹으로 묶기

SELECT 열이름, 열이름(그룹)
FROM 테이블이름
WHERE 조건식(생략가능)
GROUP BY 열이름
ORDER BY 열이름 (정렬 생략가능)

테이블에 접근하여
WHERE 조건에 맞는 데이터만 골라내고 (생략가능)
열을 같은 값끼리 그룹화하여
오름차순 / 내림차순 정렬하여
결과를 출력


employees 테이블에서 employee_id가 10이상 직원들만 job_id별로 그룹화하여
job_id 별로 총 급여와 job_id 별 평균급여를 구하고
job_id 별 총 급여를 기준으로 내림차순 정렬하세요


SELECT job_id, SUM(salary) 총급여, AVG(salary) 평균
FROM hr.employees 
WHERE employee_id>=10
GROUP BY job_id
ORDER BY 총급여 DESC;

HAVING 연산된 그룹 함수 결과에 조건을 적용하기

WHERE절에서는 그룹함수를 하용할 수 없기 때문에 HAVING절을 사용하여 그룹함수의 결과에 다시 조건을 적용

employees 테이블에서 employee_id가 10이상인 직원들에 대해 job_id별로
그룹화하여 job_id별로 총 급여와 평균 급여를 구하고 job_id 별 총급여가 30000보다 큰값만 job_id별
총급여를 기준으로 내림차순 정렬하여 출력하세요.

	SELECT job_id 직무, SUM(salary) 총급여, AVG(salary) 평균 
	FROM hr.employees 
	WHERE employee_id >= 10 
	GROUP BY job_id
	HAVING SUM(salary) > 30000
	ORDER BY 총급여 DESC;

여러개 테이블 연결 join
관계형 데이터베이스의 핵심 요소 조인

조인???
관계형 데이터 베이스란 테이블들이 관계를 맺고 조작되는 원리를 가진다.
테이블에는 각 유형에 맞는 데이터가 저장되고 테이블은 특정한 규칙에 따라 상호 관계를 가진다.
이름 위해 사용하는 기법이 조인이다.


조인 기법

동등조인	조인 조건이 정확히 일치하는 경우에만 결과 출력
외부조인	조인 조건이 정확히 일치하지 않아도 모든 결과 출력
자체조인	자체 테이블에서 조인하고자 할때 사용

(곱집합, 비동등)

동등 조인의 기본 구문

SELECT	테이블1.열1[, 테이블2.열2]
FROM	테이블1, 테이블 2
WHERE	테이블1.열1 = 테이블2.열2

SELECT 절에는 출력할 열
FROM 접근하려는 테이블 들의 이름
WHERE 절에는 조인 조건을 기술

조회의 명확성을 위해서 열이름 앞에는 테이블 이름을 붙인다. (테이블들에 동일한 이름이 존재할 수 있기때문에)
